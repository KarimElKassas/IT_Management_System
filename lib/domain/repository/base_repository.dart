import 'package:dartz/dartz.dart';
import 'package:it_work/data/models/area_model.dart';
import 'package:it_work/data/models/department_model.dart';
import 'package:it_work/data/models/device_maintenance_task_model.dart';
import 'package:it_work/data/models/graphics_card_brand_model.dart';
import 'package:it_work/data/models/graphics_card_model_device_model.dart';
import 'package:it_work/data/models/hard_drive_type_model.dart';
import 'package:it_work/data/models/pc_model_device_model.dart';
import 'package:it_work/data/models/processor_brand_model.dart';
import 'package:it_work/data/models/processor_core_gen_model.dart';
import 'package:it_work/data/models/processor_model_device_model.dart';
import 'package:it_work/data/models/ram_type_model.dart';
import 'package:it_work/data/models/screen_brand_model.dart';
import 'package:it_work/data/models/sector_model.dart';
import 'package:it_work/data/models/seeker_model.dart';
import 'package:it_work/domain/usecase/add_device_use_case.dart';
import 'package:it_work/domain/usecase/add_screen_use_case.dart';
import 'package:it_work/domain/usecase/add_sector_use_case.dart';
import 'package:it_work/domain/usecase/create_new_repair_use_case.dart';
import 'package:it_work/domain/usecase/get_areas_use_case.dart';
import 'package:it_work/domain/usecase/get_departments_use_case.dart';
import 'package:it_work/domain/usecase/get_graphic_models_use_case.dart';
import 'package:it_work/domain/usecase/get_hard_type_use_case.dart';
import 'package:it_work/domain/usecase/get_pc_model_use_case.dart';
import 'package:it_work/domain/usecase/get_processor_brands_use_case.dart';
import 'package:it_work/domain/usecase/get_processor_gens_use_case.dart';
import 'package:it_work/domain/usecase/get_processor_models_use_case.dart';
import 'package:it_work/domain/usecase/get_ram_type_use_case.dart';
import 'package:it_work/domain/usecase/get_repairs_use_case.dart';
import 'package:it_work/domain/usecase/get_screen_brand_use_case.dart';
import 'package:it_work/domain/usecase/get_sectors_use_case.dart';
import 'package:it_work/domain/usecase/search_for_seeker_use_case.dart';
import '../../../../core/error/failure.dart';
import '../../data/models/device_model.dart';
import '../../data/models/user_model.dart';
import '../usecase/add_area_use_case.dart';
import '../usecase/add_department_use_case.dart';
import '../usecase/add_device_model_usecase.dart';
import '../usecase/add_graphic_brand_use_case.dart';
import '../usecase/add_graphic_card_mode_use_case.dart';
import '../usecase/add_hard_type_use_case.dart';
import '../usecase/add_processor_brand_use_case.dart';
import '../usecase/add_processor_gen_use_case.dart';
import '../usecase/add_processor_model_use_case.dart';
import '../usecase/add_ram_type_usecase.dart';
import '../usecase/create_seeker_use_case.dart';
import '../usecase/get_device_by_serial_use_case.dart';
import '../usecase/get_device_department_use_case.dart';
import '../usecase/get_graphic_brands_use_case.dart';
import '../usecase/get_user_use_case.dart';
import '../usecase/login_user_use_case.dart';

abstract class BaseRepository {
  Future<Either<Failure, String>> loginUser(LoginUserParameters parameters);
  Future<Either<Failure, UserModel>> getUser(GetUserParameters parameters);
  Future<Either<Failure, List<SectorModel>>> getSectors(GetSectorsParameters parameters);
  Future<Either<Failure, List<DepartmentModel>>> getDepartments(GetDepartmentsParameters parameters);
  Future<Either<Failure, List<AreaModel>>> getAreas(GetAreasParameters parameters);
  Future<Either<Failure,List<ProcessorBrandModel>>> getProcessorBrands(GetProcessorBrandsParameters parameters);
  Future<Either<Failure,List<ProcessorModelDeviceModel>>> getProcessorModels(GetProcessorModelsParameters parameters);
  Future<Either<Failure,List<ProcessorCoreGenModel>>> getProcessorGens(GetProcessorGensParameters parameters);
  Future<Either<Failure,List<GraphicsCardBrandModel>>> getGraphicBrands(GetGraphicBrandsParameters parameters);
  Future<Either<Failure,List<GraphicsCardModelDeviceModel>>> getGraphicModels(GetGraphicModelsParameters parameters);
  Future<Either<Failure,List<RamTypeModel>>> getRamTypes(GetRamTypesParameters parameters);
  Future<Either<Failure,List<HardDriveTypeModel>>> getHardTypes(GetHardTypesParameters parameters);
  Future<Either<Failure,List<PcModelDeviceModel>>> getPcModel(GetPcModelParameters parameters);
  Future<Either<Failure,List<ScreenBrandModel>>> getScreenBrands(GetScreenBrandParameters parameters);
  Future<Either<Failure,String>> addDevice(AddDeviceParameters parameters);
  Future<Either<Failure,String>> addScreen(AddScreenParameters parameters);
  Future<Either<Failure,String>> addSector(AddSectorParameters parameters);
  Future<Either<Failure,String>> addArea(AddAreaParameters parameters);
  Future<Either<Failure,String>> addDepartment(AddDepartmentParameters parameters);
  Future<Either<Failure,String>> addProcessorBrand(AddProcessorBrandParameters parameters);
  Future<Either<Failure,String>> addProcessorModel(AddProcessorModelParameters parameters);
  Future<Either<Failure,String>> addProcessorGen(AddProcessorGenParameters parameters);
  Future<Either<Failure,String>> addGraphicsCardBrand(AddGraphicCardBrandParameters parameters);
  Future<Either<Failure,String>> addGraphicsCardModel(AddGraphicCardModelParameters parameters);
  Future<Either<Failure,String>> addRamType(AddRamTypeParameters parameters);
  Future<Either<Failure,String>> addDeviceModel(AddDeviceModelParameters parameters);
  Future<Either<Failure,String>> addHardType(AddHardTypeParameters parameters);
  Future<Either<Failure,SeekerModel>> searchForSeeker(SearchForSeekerParameters parameters);
  Future<Either<Failure,SeekerModel>> getSeekerById(SearchForSeekerParameters parameters);
  Future<Either<Failure,SeekerModel>> createSeeker(CreateSeekerParameters parameters);
  Future<Either<Failure,DeviceModel>> getDeviceBySerial(GetDeviceBySerialParameters parameters);
  Future<Either<Failure,Map<String,dynamic>>> getDeviceDepartment(GetDeviceDepartmentParameters parameters);
  Future<Either<Failure,String>> createNewRepair(CreateNewRepairParameters parameters);
  Future<Either<Failure,List<DeviceMaintenanceTaskModel>>> getMaintenanceTasks(GetMaintenanceTasksParameters parameters);

}